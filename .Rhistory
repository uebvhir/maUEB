#apply correction for batch effect to normalized data
batch <- as.factor(targets[,batchcolName])
normData.corrbatch <- removeBatchEffect(exprs(eset_norm), batch=batch) #function from limma package
loadsPCAnorm.corrbatch <- qc_pca(data=normData.corrbatch, scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData-corrbatch")
}
if (pvcaNormData){
qc_pvca(data=data.pvca, factors=batch.factors, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
if (pvcaNormData){
qc_pvca(data=data.pvca, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
pvcaNormData.fact
if (pvcaNormData){
qc_pvca(data=eset_norm, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
if (pvcaNormData){
qc_pvca(data=eset_norm, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
if (pvcaNormData){
qc_pvca(data=data.pvca, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
if (pvcaNormData){
qc_pvca(data=eset_norm, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
build_vignette("maUEB")
require(devtools)
build_vignettes("maUEB")
if (pvcaNormData){
qc_pvca(data=eset_norm, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
require(limma)
?removeBatchEffect
require(devtools)
require(roxygen2)
setwd("/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB")
document()
setwd("..")
install("maUEB")
knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = TRUE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
rawData <- read_celfiles(inputDir=celDir, targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
rawData
if (boxplotRawData){
qc_boxplot(data=rawData, group=targets$Group, col=targets$Colors, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca(data=exprs(rawData), scale=pcaRawData.scale, factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (heatmapRawData){
qc_hc(data=exprs(rawData), hclust.method=hclustRawData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="RawData")
}
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
require(devtools)
require(roxygen2)
setwd("/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB")
document()
setwd("..")
install("maUEB")
require(maUEB)
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
save_annotations
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
require(maUEB)
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
detach("package:maUEB", unload=TRUE)
library("maUEB", lib.loc="/usr/local/lib/R/site-library")
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
aafTableAnn(data=rownames(eset_norm), annotPkg=annotPackage)
require(annaffy)
saveHTML(at, file.path(resultsDir, paste0("Annotations.AllGenes", ".html")), "Annotations for all genes")
at <- aafTableAnn(data=rownames(eset_norm), annotPkg=annotPackage)
at <- aafTableAnn(rownames(eset_norm), annotPackage)
saveHTML(at, file.path(resultsDir, paste0("Annotations.AllGenes", ".html")), "Annotations for all genes")
saveText(at, file.path(resultsDir, paste0("Annotations.AllGenes", ".csv")), header=TRUE)
at
knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = TRUE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
rawData <- read_celfiles(inputDir=celDir, targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
rawData
if (boxplotRawData){
qc_boxplot(data=rawData, group=targets$Group, col=targets$Colors, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca(data=exprs(rawData), scale=pcaRawData.scale, factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (heatmapRawData){
qc_hc(data=exprs(rawData), hclust.method=hclustRawData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="RawData")
}
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
#no se pq dona error. tambe com a paquets q requereixi la funcio diria q amb lannaffy nhi hauria dhaver prou
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
save_annotations
at <- aafTableAnn(rownames(eset_norm), annotPackage)
require(annaffy)
at <- aafTableAnn(rownames(eset_norm), annotPackage)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
require(maUEB)
#no se pq dona error. tambe com a paquets q requereixi la funcio diria q amb lannaffy nhi hauria dhaver prou
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
#no se pq dona error. tambe com a paquets q requereixi la funcio diria q amb lannaffy nhi hauria dhaver prou
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
#no se pq dona error. tambe com a paquets q requereixi la funcio diria q amb lannaffy nhi hauria dhaver prou
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
#no se pq dona error. tambe com a paquets q requereixi la funcio diria q amb lannaffy nhi hauria dhaver prou
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
if (pcaNormData.corrbatch){
loadsPCAnorm.corrbatch <- qc_pca_removebatch(exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData-corrbatch", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
}
pcaNormData.fact
if (pcaNormData){
loadsPCAnorm <- qc_pca(data=exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
detach("package:maUEB", unload=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
if (pcaNormData){
loadsPCAnorm <- qc_pca(data=exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData.corrbatch){
loadsPCAnorm.corrbatch <- qc_pca(exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData-corrbatch", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
}
pcaNormData.fact
targets$Group
if (pcaNormData){
loadsPCAnorm <- qc_pca(data=exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
data=exprs(eset_norm); scale=pcaNormData.scale; factors=pcaNormData.fact; targets=targets; col.group="Colors"; colorlist=colorlist; names=targets$ShortName; outputDir=resultsDir; label="NormData"
colorlist
batchRemove=FALSE; batchFactors=NULL
size = 1.5; glineas = 0.25
is.null(colorlist)
batchRemove
#compute PCA
data.pca <- prcomp(t(data), scale=scale)
loads <- round(data.pca$sdev^2/sum(data.pca$sdev^2)*100, 1)
#creates pca plots colored by each factor specified
listplots <- list()
length(factors)
for (i in 1:length(factors)){
fact <- factors[i]
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[, fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
listplots[[i]] <- pcaplot
}
require(ggplot)
require(ggplot2)
require(ggrepel)
for (i in 1:length(factors)){
fact <- factors[i]
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[, fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
listplots[[i]] <- pcaplot
}
#save as pdf
pdf(file.path(outputDir, paste0("PCA", label, ".pdf")))
for (j in listplots) {print(j)}
dev.off()
i=1
fact <- factors[i]
fact
lev <- levels(targets[, fact])
lev
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcacolors
View(targets)
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
pcatitle
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = fact), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
pcaplot
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
pcaplot
#creates pca plots colored by each factor specified
listplots <- list()
listplots[[i]] <- pcaplot
i=2
fact <- factors[i]
fact
lev <- levels(targets[, fact])
lev
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcacolors
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
pcaplot
listplots[[i]] <- pcaplot
pdf(file.path(outputDir, paste0("PCA", label, ".pdf")))
for (j in listplots) {print(j)}
dev.off()
listplots[[]]
listplots[[1]]
rm(listplots)
#creates pca plots colored by each factor specified
listplots <- list()
for (i in 1:length(factors)){
fact <- factors[i]
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
listplots[[i]] <- pcaplot
}
listplots[[1]]
i=1
fact <- factors[i]
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
#creates pca plots colored by each factor specified
listplots <- list()
listplots[[1]]
listplots[[i]] <- pcaplot
listplots[[1]]
i=2
fact <- factors[i]
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
listplots[[i]] <- pcaplot
listplots[[2]]
listplots[[1]]
View(listplots)
?ggplot
#creates pca plots colored by each factor specified
listplots <- list()
for (i in 1:length(factors)){
fact <- factors[i]
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
#the graphic
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
listplots[[i]] <- print(pcaplot)
}
listplots[[1]]
#creates pca plots colored by each factor specified
listplots <- list()
for (i in 1:length(factors)){
fact <- factors[i]
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
#the graphic
listplots[[i]] <- local({
i <- i
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
print(pcaplot)
})
}
listplots[[1]]
#creates pca plots colored by each factor specified
listplots <- list()
for (i in 1:length(factors)){
#the graphic
listplots[[i]] <- local({
i <- i
fact <- factors[i]
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
print(pcaplot)
})
}
listplots[[1]]
listplots[[2]]
?lapply(list, function)
?lapply
#creates pca plots colored by each factor specified
listplots <- lapply(factors, function(fact){
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
pcaplot <- ggplot(data.frame(data.pca$x), aes(x=PC1, y=PC2)) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,1])-5,max(data.pca$x[,1])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = PC2 + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste("PC1",loads[1],"%")), y=c(paste("PC2",loads[2],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
print(pcaplot)
})
lisplots[[1]]
listplots[[1]]
listplots[[2]]
detach("package:maUEB", unload=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
if (pcaNormData){
loadsPCAnorm <- qc_pca(data=exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData){
loadsPCAnorm <- qc_pca(data=exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
if (pcaNormData){
loadsPCAnorm <- qc_pca(data=exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData.corrbatch){
loadsPCAnorm.corrbatch <- qc_pca(exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
}
?read.table
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
