document()
require(devtools)
require(roxygen2)
document()
setwd("..")
install("maUEB")
require(devtools)
require(roxygen2)
setwd("..")
install("maUEB")
document()
setwd("maUEB")
document()
install.packages("Biobase")
install.packages("Biobase")
BiocManager::install("Biobase")
document()
require(devtools)
require(roxygen2)
document()
document()
setwd("..")
install("maUEB")
help(package="maUEB")
?buildTargets
?createBoxplot
document()รง
setwd("maUEB")
document()
document()
document()
setwd("..")
install("maUEB")
setwd("maUEB")
document()
load_all()
setwd(..)
setwd("..")
install("maUEB")
?buildTargets
setwd("maUEB")
document()
setwd("..")
install("maUEB")
?buildTargets
require(maUEB)
?buildTargets
require(devtools)
require(roxygen2)
?boxplot
oligo::boxplot
boxplot
document()
document()
devtools::load_all(".")
?createBoxplot
library(maUEB)
library(maUEB)
?createBoxplot
?legend
setwd("..")
install("maUEB")
?par
library(maUEB)
install("maUEB")
setwd("maUEB")
document()
setwd("..")
install("maUEB")
boxplot
oligo::boxplot
showMethods("boxplot")
showMethods("oligo::boxplot")
setwd("maUEB")
document()
setwd("..")
install("maUEB")
?prcomp
?ggplot
require(ggplot2)
?ggplot
setwd("maUEB")
document()
setwd("..")
install("maUEB")
setwd("maUEB")
document()
setwd("..")
install("maUEB")
setwd("maUEB")
document()
setwd("..")
install("maUEB")
setwd("maUEB")
document()
setwd("..")
install("maUEB")
?lapply
setwd("maUEB")
document()
setwd("..")
install("maUEB")
setwd("maUEB")
document()
setwd("..")
install("maUEB")
paste("Principal Component Analysis for: ", label, ". ", fact)
label <- "RawData"
fact <- "Group"
paste("Principal Component Analysis for: ", label, ". ", fact)
paste0("Principal Component Analysis for: ", label, ". ", fact)
setwd("maUEB")
document()
setwd("..")
install("maUEB")
setwd("maUEB")
document()
setwd("..")
install("maUEB")
?scale_color_manual
setwd("maUEB")
document()
setwd("..")
install("maUEB")
?dist
?hclust
?hclust
?heatmap
setwd("maUEB")
document()
setwd("..")
install("maUEB")
?dist
require(devtools)
use_vignette("Example_microarray_analysis")
setwd("/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB/vignettes")
setwd("/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB")
require(roxygen2)
document()
setwd("..")
install("maUEB")
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB")
}
setwd("/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB")
# Set working directory to the vignette directory
pkgDir <- getwd()
workingDir <- file.path(pkgDir, "vignettes")
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
paramDir
# Set working directory to the vignette directory
pkgDir <- getwd()
workingDir <- file.path(pkgDir, "vignettes")
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
paramDir
# Set working directory to the vignette directory
pkgDir <- getwd()
pkgDir
setwd("/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB")
# Set working directory to the vignette directory
pkgDir <- getwd()
pkgDir
getwd()
# Set working directory to the vignette directory
pkgDir <- getwd()
pkgDir
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
setwd("..")
install(maUEB)
require(devtools)
require(roxygen2)
install(maUEB)
install("maUEB")
install.packages("render")
library(maUEB)
browseVignettes("maUEB")
help(package="maUEB")
require(oligo)
?rma
rma
showMethods("rma")
eval(parse(text=paste0(normalize.method,"(", data, "target='core'",")")))
normalize.method <- "rma"
paste0(normalize.method,"(", data, "target='core'",")")
?rma
document()
require(devtools)
document()
setwd("..")
install("maUEB")
?normalize
?normalization
setwd("maUEB")
document()
setwd("..")
install("maUEB")
require(maUEB)
knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB")
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(celDir, dataDir, client, ID, descriptors)
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
targets <- read_targets(dataDir, targetsFN, targets.fact)
head(targets)
dim(targets)
summary(targets)
if (readcelFiles){
rawData <- read_celfiles(celDir, targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
rawData
dim(rawData)
if (boxplotRawData){
qc_boxplot(data=rawData, group=targets$Group, col=targets$Colors, names=targets$ShortName, resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca(data=exprs(rawData), scale=pcaRawData.scale, factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, resultsDir=resultsDir, label="RawData")
}
if (heatmapRawData){
qc_hc(data=exprs(rawData), hclust.method=hclustRawData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, resultsDir=resultsDir, label="RawData")
}
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else {
eset_norm <- normalization(data=rawData, norm.method="rma", norm.level="core", bkgremove=TRUE, outputFN="Normalized.All", resultsDir)
}
eset_norm <- normalization(data=rawData, norm.method="rma", norm.level="probe", bkgremove=TRUE, outputFN="Normalized.All", resultsDir)
eset_norm <- oligo::rma(data=rawData, target="probe", background=TRUE)
eset_norm <- oligo::rma(rawData, target="probe", background=TRUE)
eset_norm <- oligo::rma(rawData, background=TRUE)
eset_norm <- normalization(data=rawData, norm.method="rma", norm.level="probeset", bkgremove=TRUE, outputFN="Normalized.All", resultsDir)
eset_norm <- normalization(data=rawData, norm.method="rma", norm.level='probeset', bkgremove=TRUE, outputFN="Normalized.All", resultsDir)
eset_norm <- oligo::rma(rawData, target='probeset')
annotation(rawData)
eset_norm <- oligo::rma(rawData)
annotation(eset_norm)
annotation(eset_norm) <- annotPackage
annotation(eset_norm)รง
annotation(eset_norm)
require(devtools)
require(roxygen2)
document()
setwd("..")
install("maUEB")
build_vignettes(("maUEB"))
build_vignettes(("maUEB"))
?read_targets
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
par <- source(file.path(paramDir, "global_parameters.par"))
View(par)
par
targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, row.names = 1, sep = ";", as.is=TRUE)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, row.names = 1, sep = ";", as.is=TRUE))
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = TRUE, sep = ";", as.is=TRUE))
global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = TRUE, sep = ";", as.is=TRUE)
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = TRUE, sep = "\t", as.is=TRUE))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = TRUE, sep = ",", as.is=TRUE))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = TRUE, sep = " <- ", as.is=TRUE))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = TRUE, sep = "  ", as.is=TRUE))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = TRUE, as.is=TRUE))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, as.is=TRUE))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(dataDir, targetsFN, targets.fact))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(dataDir, targetsFN, targets.fact))
rawData
if (readcelFiles){
rawData <- read_celfiles(celDir, targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
```{r echo=FALSE, message=FALSE}
if (readcelFiles){
rawData <- read_celfiles(celDir, targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
rawData
names(rawData)
colnames(rawData)
?ExpressionSet
nrow(assayData(rawData))
nrow(exprs(rawData))
ncol(exprs(rawData))
loadNormData
normalize
annotPackage
require(oligo)
?rma
rawData
?aafTableAnn
??aafTableAnn
require(annaffy)
?aafTableAnn
data <- rownames(eset_norm)
setwd("maUB")
setwd("maUEB")
document()
setwd("..")
install("maUB")
install("maUEB")
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", norm.level=NULL, bkgremove=TRUE, outputFN="Normalized.All", outputDir=resultsDir)
}
source('~/.active-rstudio-document', echo=TRUE)
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", norm.level=NULL, outputFN="Normalized.All", outputDir=resultsDir)
}
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", outputFN="Normalized.All", outputDir=resultsDir)
}
data <- rawData
norm.method="rma"
exonStudy=FALSE
bkgremove=TRUE
outputFN="Normalized.All"
outputDir <- resultsDir
if (norm.method=="rma"){
if (exonStudy){
eset_norm <- oligo::rma(data, target=norm.level, background=bkgremove)
} else {eset_norm <- oligo::rma(data, background=bkgremove)}
}
#incloure aqui altres metodes possibles de normalitzacio
##Annotation of normalized expression set
annotation(eset_norm) <- annotPackage
##Save normData as csv and xls if possible
normData <- as.data.frame(exprs(eset_norm))
write.csv2(normData, file.path(outputDir, paste0(outputFN, ".csv"))) #millor guardar csv que xls ja que xls nomes permet guardar 65535 files
if ((nrow(normData)<=65535) & (ncol(normData)<=256)){
WriteXLS(normData, ExcelFileName = file.path(outputDir, paste0(outputFN, ".xls")), row.names = TRUE)
}
require(WriteXLS)
if ((nrow(normData)<=65535) & (ncol(normData)<=256)){
WriteXLS(normData, ExcelFileName = file.path(outputDir, paste0(outputFN, ".xls")), row.names = TRUE)
}
source('~/.active-rstudio-document', echo=TRUE)
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", outputFN="Normalized.All", outputDir=resultsDir)
}
source('~/.active-rstudio-document', echo=TRUE)
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
source('~/.active-rstudio-document', echo=TRUE)
if (saveAnnot){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
source('~/.active-rstudio-document', echo=TRUE)
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
source('~/.active-rstudio-document', echo=TRUE)
if (save_annot_all){normData_annot <- save_annotations(data=rownames(eset_norm), annotPkg=annotPackage, outputFN="Annotations.AllGenes", saveHTML=TRUE, title="Annotations for all genes", outputDir=resultsDir)}
normData_annot
knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = TRUE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
rawData <- read_celfiles(inputDir=celDir, targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
rawData
if (boxplotRawData){
qc_boxplot(data=rawData, group=targets$Group, col=targets$Colors, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca(data=exprs(rawData), scale=pcaRawData.scale, factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (heatmapRawData){
qc_hc(data=exprs(rawData), hclust.method=hclustRawData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="RawData")
}
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalize) {
eset_norm <- normalization(data=rawData, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
if (boxplotNormData){
qc_boxplot(data=eset_norm, group=targets$Group, col=targets$Colors, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
?boxplot
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
setwd("..")
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
if (boxplotNormData){
qc_boxplot(data=eset_norm, group=targets$Group, col=targets$Colors, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData){
loadsPCAnorm <- qc_pca(data=exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNomData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData){
loadsPCAnorm <- qc_pca(data=exprs(eset_norm), scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (heatmapNormData){
qc_hc(data=exprs(eset_norm), hclust.method=hclustNormData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="NormData")
}
#Note: Set 'intgroup' according to factors to be colored in heatmap. Other plots will be colored according to only the first factor
require(arrayQualityMetrics) #required for Affymetrix QC
if (arrayQMNormData) arrayQualityMetrics(eset_norm, outdir = file.path(resultsDir, "QCDir.Norm"), force=TRUE, intgroup=targets.fact)
if (pcaNormData.corrbatch){
require(limma)
#apply correction for batch effect to normalized data
batch <- as.factor(targets[,batchcolName])
normData.corrbatch <- removeBatchEffect(normData, batch=batch) #function from limma package
loadsPCAnorm.corrbatch <- qc_pca(data=normData.corrbatch, scale=pcaNormData.scale, factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData-corrbatch")
}
build_vignettes("maUEB")
build_vignettes("maUEB")
install_github("uebvhir/maUEB", build_vignettes = TRUE)
