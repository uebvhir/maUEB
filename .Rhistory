source(file.path(paramDir, "02-DEA_analysistodo.par"))
(loadDEA_parameters <- read.table(file.path(paramDir, "02-DEA.par"), header = FALSE, sep=";", as.is=TRUE))
(loadDEA_todoparameters <- read.table(file.path(paramDir, "02-DEA_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
resultsDir <- file.path(workingDir, resultsDirN)
load(file.path(dataDir, inputDEARda))
eset_analysis <- eval(parse(text=eset_analysis))
#parameters specified in file 02-DEA.par:
design.mainfact
design.cofact
blocking.fact
(design <- dea_lmdesign(targets=pData(eset_analysis), sampleNames="ShortName", data=eset_analysis,
group=design.mainfact, covariates=design.cofact, fmla=NULL,
summaryFN=resultsSummFN, outputDir=resultsDir))
fit <- dea_lmfit(data=eset_analysis, targets=pData(eset_analysis), design=design, block.cor=NULL, summaryFN=resultsSummFN, outputDir=resultsDir)
fit.main <- dea_compare(fit=fit, contrasts=contrastsv, design=design, moderated=TRUE, summaryFN=resultsSummFN, outputDir=resultsDir)
names(fit.main)
(listofcoef <- colnames(fit.main))
#versio amb les html tables modificades pq mostriin tots els estadistics
listofcsv <- dea_toptab(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE, #ReportHTMLTopTab,
html_ntop=500, html_group="Group",
outputDir=resultsDir)
names(listofcsv)
head(listofcsv[[1]])
#versio amb les html tables com venen per defecte (nomes mostra adj pval o pval)
listofcsv <- dea_toptab_original(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE,#ReportHTMLTopTab,
html_ntop=500, html_group="Group", html_padjust_method = toptable_padjust_method,
outputDir=resultsDir)
(numGenesChanged <- dea_summary_ngc(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir))
ngc_list <- dea_summary_ngc_ext(listofcoef=listofcoef, listofcsv=listofcsv, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
names(ngc_list)
head(ngc_list[["PD1vsCTL"]])
numGenesChanged_all <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
names(numGenesChanged_all)
#si declaro els parametres aixi no em funciona:
# numGenesChanged_allkk <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=B_thr, Pval_thr.e=Pval_thr, adjPval_thr.e=adjPval_thr, logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(0.5,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=1, cols=1, outputDir=resultsDir, label="")
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(0.5,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=1, cols=1, outputDir=resultsDir, label="")
dea_volcanoplot
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(0.5,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=1, cols=1, outputDir=resultsDir, label="")
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(0.5,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=1, cols=1, outputDir=resultsDir, label="")
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(0.5,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=1, cols=1, outputDir=resultsDir, label="")
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(0.5,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=3, cols=1, outputDir=resultsDir, label="")
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(0.5,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(0.5,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
?dea_all
contrastsv
length(contrastsv)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea.results1 <- dea_all1(data=eset_analysis, targets=pData(eset_analysis), sampleNames="ShortName", group=design.mainfact, covariates=design.cofact, fmla=NULL, block.cor=blocking.fact, contrastsv=contrastsv, moderated=TRUE, padjust.method="fdr", html_report=FALSE, html_ntop=500, html_group="Group", donumGenesChanged=TRUE,  B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), dovolcanoplot=TRUE, volc_logFC=rep(1,length(contrastsv)), volc_pval=c(rep("adj.P.Val", length(contrastsv))), volc_pval.thr=rep(0.05, length(contrastsv)), volc_x0=rep(-3, length(contrastsv)), volc_x1=rep(+3, length(contrastsv)), volc_y0=rep(0, length(contrastsv)), volc_y1=rep(10, length(contrastsv)), n=6, cols=2, label="", summaryFN=resultsSummFN, outputDir=resultsDir)
dea.results1
View(dea.results1)
dea_results1$design
dea.results1$design
dea.results1$fit
dea.results1$fit.main
dea.results$fit.main$design
dea.results <- dea_all1(data=eset_analysis, targets=pData(eset_analysis), sampleNames="ShortName", group=design.mainfact, covariates=design.cofact, fmla=NULL, block.cor=blocking.fact, contrastsv=contrastsv, moderated=TRUE, padjust.method="fdr", html_report=FALSE, html_ntop=500, html_group="Group", donumGenesChanged=TRUE,  B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), dovolcanoplot=TRUE, volc_logFC=rep(1,length(contrastsv)), volc_pval=c(rep("adj.P.Val", length(contrastsv))), volc_pval.thr=rep(0.05, length(contrastsv)), volc_x0=rep(-3, length(contrastsv)), volc_x1=rep(+3, length(contrastsv)), volc_y0=rep(0, length(contrastsv)), volc_y1=rep(10, length(contrastsv)), n=6, cols=2, label="", summaryFN=resultsSummFN, outputDir=resultsDir)
dea.results$fit.main$design
dea.results$fit.main$contrasts
names(dea.results)
View(dea.results)
?dea_all1
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
res1 <- dea_all2(data=eset_analysis, targets=pData(eset_analysis), sampleNames="ShortName", group=design.mainfact, covariates=design.cofact, fmla=NULL, block.cor=blocking.fact, contrastsv=contrastsv, moderated=TRUE, summaryFN=resultsSummFN, outputDir=resultsDir)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
res1 <- dea_all2(data=eset_analysis, targets=pData(eset_analysis), sampleNames="ShortName", group=design.mainfact, covariates=design.cofact, fmla=NULL, block.cor=blocking.fact, contrastsv=contrastsv, moderated=TRUE, summaryFN=resultsSummFN, outputDir=resultsDir)
res1$ngc$numGenesChanged
res2 <-dea_all2(data=eset_analysis, targets=pData(eset_analysis), sampleNames="ShortName", group=design.mainfact, covariates=design.cofact, fmla=NULL, block.cor=blocking.fact, contrastsv=contrastsv, moderated=TRUE, summaryFN=resultsSummFN, outputDir=resultsDir,  Pval_thr=c(0.01))
res2$ngc$numGenesChanged
?dea_all2
?volcano
?ggplot
?plot
plot
standardGeneric("plot")
showMethods("plot")
require(maUEB)
?dea_volcanoplot
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
require(maUEB)
?dea_lmfit
library(maUEB)
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
setwd("/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB/vignettes")
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
eset_raw <- read_celfiles(inputDir=celDir, targets=targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
eset_raw
if (boxplotRawData){
qc_boxplot(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, pca2D_factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, dim=3, pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
?plot_ly
qc_pca1 <- function(data, scale_pca, dim=c(1,2,3), pca2D_factors=c("Group"), pca3D=FALSE, pca3D_factors=c("Group"), targets, col.group="Colors", colorlist=NULL, names, batchRemove=FALSE, batchFactors=NULL, outputDir, label, size = 1.5, glineas = 0.25){
if (is.null(colorlist)){colorlist <- rainbow(ncol(data))}
if (batchRemove){
if (is.null(batchFactors)){stop("The variable names of batch factors should be provided.")}
data <- removebatch(data=data, targets=targets, batchFactors=batchFactors)
label <- paste0(label, "-corrbatch")
}
#compute PCA
data.pca <- prcomp(t(data), scale=scale_pca)
loads <- round(data.pca$sdev^2/sum(data.pca$sdev^2)*100, 1)
dims <- paste0("PC", dim)
if (!pca3D){
#creates pca plots colored by each factor specified and outputs into a list.
## here done using lapply. Can also be done using for loop but need to use local environment, otherwise it overwrites the plots in the list (eg. for (i in 1:length(factors)){listplots[[i]] <- local({i <- i; fact <- factors[i]; ... ; print(pcaplot)})}
listplots <- lapply(pca2D_factors, function(fact){
lev <- levels(targets[, fact])
ifelse (fact=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact)
pcaplot <- ggplot(data.frame(data.pca$x), aes_string(x=dims[1], y=dims[2])) +
theme_classic() +
geom_hline(yintercept = 0, color = "gray70") +
geom_vline(xintercept = 0, color = "gray70") +
geom_point(aes(color = targets[,fact]), alpha = 0.55, size = 3) +
coord_cartesian(xlim = c(min(data.pca$x[,dim[1]])-5,max(data.pca$x[,dim[1]])+5)) +
# scale_fill_discrete(name = fact) +
geom_text_repel(aes(y = eval(parse(text=dims[2])) + 0.25, label = names), segment.size = 0.25, size = size) +
labs(x = c(paste(dims[1],loads[dim[1]],"%")), y=c(paste(dims[2],loads[dim[2]],"%"))) +
ggtitle(pcatitle) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name=fact, values=pcacolors)
return(pcaplot)
})
#save as pdf
pdf(file.path(outputDir, paste0("PCA", label, ".pdf")))
for (j in listplots) {print(j)}
dev.off()
#print plot in device
for (j in listplots) {print(j)}
}
if (pca3D){
dataDf <- data.frame(data.pca$x)
listplots3D <- lapply(pca3D_factors, function(fact3d){
lev <- levels(targets[, fact3d])
ifelse (fact3d=="Group", pcacolors <- unique(targets[, col.group]), pcacolors <- colorlist[1:length(lev)])
pcatitle <- paste0("Principal Component Analysis for: ", label, ". ", fact3d)
p <- plot_ly(dataDf, type = "scatter3d", x = dataDf[,dims[1]] , y = dataDf[,dims[2]], z= dataDf[,dims[3]],
text = rownames(dataDf), mode = "markers+text", showlegend =TRUE,
color = ~targets[,fact3d], colors = pcacolors) %>%
layout(title=pcatitle,
scene = list(xaxis = list(title = paste(dims[1], loads[1], "%")),
yaxis = list(title = paste(dims[2], loads[2], "%")),
zaxis = list(title = paste(dims[3], loads[3], "%"))))
#save plot as html file into outputdir
htmlwidgets::saveWidget(as_widget(p), file.path(resultsDir, paste0("PCA3D", label, ".", fact3d, ".html")))
return(p)
})
}
return(loads)
}
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, dim=3, pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
?ggplot
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB/R/qc_pca1.R', echo=TRUE)
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), pca3D=TRUE, scale=pcaRawData.scale, dim=3, pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
eset_raw <- read_celfiles(inputDir=celDir, targets=targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
eset_raw
if (boxplotRawData){
qc_boxplot(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, pca2D_factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
setwd("/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/maUEB/vignettes")
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
eset_raw <- read_celfiles(inputDir=celDir, targets=targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
eset_raw
if (boxplotRawData){
qc_boxplot(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, pca2D_factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), pca3D=TRUE, scale=pcaRawData.scale, dim=3, pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), pca3D=TRUE, scale=pcaRawData.scale, dim=c(1,2,3), pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
eset_raw <- read_celfiles(inputDir=celDir, targets=targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
eset_raw
if (boxplotRawData){
qc_boxplot(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, pca2D_factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), pca3D=TRUE, scale=pcaRawData.scale, dim=c(1,2,3), pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (heatmapRawData){
qc_hc(data=exprs(eset_raw), hclust.method=hclustRawData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="RawData")
}
qc_all(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaRawData.fact, pca_scale=pcaRawData.scale, colorlist=colorlist, hc.method=hclustRawData.method, label="RawData", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=FALSE, dohc=TRUE, doarrayQMreport=FALSE)
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalizedata) {
eset_norm <- normalization(data=eset_raw, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
if (boxplotNormData){
qc_boxplot(data=eset_norm, group="Group", col="Colors", names="ShortName", outputDir=resultsDir, label="NormData")
}
if (pcaNormData){
loadsPCAnorm <- qc_pca1(data=exprs(eset_norm), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData.corrbatch){
loadsPCAnorm.corrbatch <- qc_pca1(exprs(eset_norm), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
}
if (heatmapNormData){
qc_hc(data=exprs(eset_norm), hclust.method=hclustNormData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="NormData")
}
if (pvcaNormData){
qc_pvca(data=eset_norm, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label="NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
qc_all(data=eset_norm, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaNormData.fact, pca_scale=pcaNormData.scale, colorlist=colorlist, hc.method=hclustNormData.method, label="NormData", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=TRUE, dohc=TRUE, doarrayQMreport=FALSE)
samplestoremove <- "CMP.2"
eset_raw.f <- eset_raw[,-which(colnames(eset_raw)%in%samplestoremove)]
dim(eset_raw)
dim(eset_raw.f)
pData(eset_raw.f)
targets.f <- pData(eset_raw.f)
eset_norm.f <- normalization(data=eset_raw.f, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
qc_all(data=eset_norm.f, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaNormData.fact, pca_scale=pcaNormData.scale, colorlist=colorlist, hc.method=hclustNormData.method, label="NormData.f", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=FALSE, dohc=TRUE, doarrayQMreport=FALSE)
loadsPCAnorm.f.corrbatch <- qc_pca1(exprs(eset_norm.f), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets.f, col.group="Colors", colorlist=colorlist, names=targets.f$ShortName, outputDir=resultsDir, label="NormData.f", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
if (SDplot){
sdplot(data=exprs(eset_norm.f), var_thr=filterByVar.thr, label="NormData", outputDir=resultsDir)
}
eset_filtered <- filtering(data=eset_norm.f, outputFN="Normalized.Filtered", outputDir=resultsDir, summaryFN=resultsSummFN,
feature.exclude="^AFFX",require.entrez=filterByAnnot, remove.dupEntrez = filterByAnnot,
var.filter=filterByVar, var.func = filterByVar.fun, var.cutoff = filterByVar.thr, filterByQuantile=TRUE,
require.GOBP = FALSE, require.GOCC = FALSE, require.GOMF = FALSE)
dim(eset_filtered)
#no se pq dona error, (Error: no such table: go.go_term) nomes passa quan s'executa com a funcio sense haver previament carregat els paquets (?)
require(annotPackage, character.only=TRUE)
require(annaffy)
if (save_annot_filt){normData.filt_annot <- save_annotations(data=rownames(eset_filtered), annotPkg=annotPackage, outputFN="Annotations.Filtered", saveHTML=TRUE, title="Annotations for filtered genes", outputDir=resultsDir)}
# When you save your data, use save(MyObject, file = "MyObject.RData", version = 2) to maintain back-compatibility and avoid the warning. (otherwise, others using R < 3.5.0 won't be able to load your saved files.)
if (!is.null(samplestoremove)){
if (normalizedata) {
save(eset_raw, eset_norm, eset_raw.f, eset_norm.f, eset_filtered, targets, targets.f, file=file.path(dataDir,"normData.Rda"), version=2)
} else {
save(eset_raw, eset_raw.f, targets, targets.f, file=file.path(dataDir,"rawData.Rda"), version=2)
}} else {
if (normalizedata) {
save(eset_raw, eset_norm, eset_filtered, targets, file=file.path(dataDir,"normData.Rda"), version=2)
} else {
save(eset_raw, targets, file=file.path(dataDir,"rawData.Rda"), version=2)
}}
#Parameters
source(file.path(paramDir, "02-DEA.par"))
#Execution parameters
source(file.path(paramDir, "02-DEA_analysistodo.par"))
(loadDEA_parameters <- read.table(file.path(paramDir, "02-DEA.par"), header = FALSE, sep=";", as.is=TRUE))
(loadDEA_todoparameters <- read.table(file.path(paramDir, "02-DEA_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
resultsDir <- file.path(workingDir, resultsDirN)
load(file.path(dataDir, inputDEARda))
eset_analysis <- eval(parse(text=eset_analysis))
#parameters specified in file 02-DEA.par:
design.mainfact
design.cofact
blocking.fact
(design <- dea_lmdesign(targets=pData(eset_analysis), sampleNames="ShortName", data=eset_analysis,
group=design.mainfact, covariates=design.cofact, fmla=NULL,
summaryFN=resultsSummFN, outputDir=resultsDir))
fit <- dea_lmfit(data=eset_analysis, targets=pData(eset_analysis), design=design, block.cor=NULL, summaryFN=resultsSummFN, outputDir=resultsDir)
fit.main <- dea_compare(fit=fit, contrasts=contrastsv, design=design, moderated=TRUE, summaryFN=resultsSummFN, outputDir=resultsDir)
names(fit.main)
(listofcoef <- colnames(fit.main))
#versio amb les html tables modificades pq mostriin tots els estadistics
listofcsv <- dea_toptab(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE, #ReportHTMLTopTab,
html_ntop=500, html_group="Group",
outputDir=resultsDir)
names(listofcsv)
head(listofcsv[[1]])
#versio amb les html tables com venen per defecte (nomes mostra adj pval o pval)
listofcsv <- dea_toptab_original(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE,#ReportHTMLTopTab,
html_ntop=500, html_group="Group", html_padjust_method = toptable_padjust_method,
outputDir=resultsDir)
(numGenesChanged <- dea_summary_ngc(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir))
ngc_list <- dea_summary_ngc_ext(listofcoef=listofcoef, listofcsv=listofcsv, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
names(ngc_list)
head(ngc_list[["PD1vsCTL"]])
numGenesChanged_all <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
names(numGenesChanged_all)
#si declaro els parametres aixi no em funciona:
# numGenesChanged_allkk <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=B_thr, Pval_thr.e=Pval_thr, adjPval_thr.e=adjPval_thr, logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
dea_volcanoplot <- function(listofcsv, listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=1, cols=1, outputDir, label=""){
#aquí es miren els punts que sortiran amb nom
plotes <- list()
for(i in 1:length(listofcsv)){
top <- listofcsv[[i]]
coef <- listofcoef[i]
#s'afegeix una columna per dir quins gens es pintaran després al volcano
top$volcThreshold <- as.factor(top[,volc_pval[i]]<volc_pval.thr[i] & abs(top[,"logFC"])>volc_logFC[i])
g <- ggplot(data = top,
aes(x = logFC, y = -log10(eval(parse(text=volc_pval[i]))), colour = volcThreshold)) +
scale_colour_manual(values = c("purple","lightblue"), breaks="TRUE", labels=paste0(volc_pval[i], "<",volc_pval.thr[i], " & abs(logFC)>", volc_logFC[i]), name="Threshold") +
geom_point(alpha = 0.4, size = 0.75) +
xlim(c(volc_x0[i], volc_x1[i])) +
xlab("log2 fold change") + ylab(paste("-log10 ", volc_pval[i]))
pl <- g + theme_bw() +
ggtitle(paste0("Volcano for: ", listofcoef[i])) +
theme(plot.title = element_text(lineheight = 0.8, face = "bold", hjust = 0.5, size = 10),
axis.title.x = element_text(size=8), axis.title.y = element_text(size=8), legend.title = element_blank(),
legend.key.size = unit(0.5, "cm"), legend.key = element_rect(fill="grey90", size=0.1), legend.text = element_text(size=8),
legend.position="top", legend.margin=margin(0,-2,-2,0), legend.box.margin=margin(-2,-8,-8,-6)) +
geom_vline(xintercept = c(-volc_logFC[i], volc_logFC[i]), linetype = "dotted") +
geom_text_repel(data = subset(top, volcThreshold == "TRUE")[1:20,], aes(label = Gene.Symbol),
size = 2, vjust = -0.25, hjust = 1.1, segment.size=0.1, col="gray20") +
scale_y_continuous(trans = "log1p", limits = c(volc_y0[i], volc_y1[i]))
plotes[[i]] <- pl
}
###Saves volcano plots in pdf file in groups of n plots/sheet
q <- length(plotes)%/%n #integer part of division: how many groups of 6
r <- length(plotes)%%n #remainder of division
ifelse (r>0, r1<-1, r1<-0)
i1<-seq(1,length(plotes),by=n)
i2<-c((1:q)*n,q*n+r)
pdf(file.path(outputDir, paste0("Volcanos", label, ".pdf")))
for (j in 1:(q+r1)){
multiplot(plotlist = plotes[i1[j]:i2[j]], cols = cols)
}
dev.off()
#to print plot in device
for (j in 1:(q+r1)){
multiplot(plotlist = plotes[i1[j]:i2[j]], cols = cols)
}
}
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
require(ggplot2)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
require(ggrepel)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
rm(list = c("dea_volcanoplot"))
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
?scale_color_manual
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
dea_volcanoplot(listofcsv=listofcsv, listofcoef=listofcoef, volc_logFC=rep(1,length(listofcoef)), volc_pval=c(rep("adj.P.Val", length(listofcoef))), volc_pval.thr=rep(0.05, length(listofcoef)), volc_x0=rep(-3, length(listofcoef)), volc_x1=rep(+3, length(listofcoef)), volc_y0=rep(0, length(listofcoef)), volc_y1=rep(10, length(listofcoef)), n=6, cols=2, outputDir=resultsDir, label="")
usethis::create_github_token()
