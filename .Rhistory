} else {
if (numGenes.df[j,"reg"]=="Up") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & top$logFC > logFC_thr,]))
}
if (numGenes.df[j,"reg"]=="Down") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & top$logFC < logFC_thr,]))
}
if (numGenes.df[j,"reg"]=="All") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & abs(top$logFC) > logFC_thr,]))
}
}
}
for (j in 1:nrow(numGenes.df)){
if (numGenes.df[j,"stat_type"]=="B"){
if (numGenes.df[j,"reg"]=="Up") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] > numGenes.df[j,"stat_thr"] & top$logFC > logFC_thr),])
}
if (numGenes.df[j,"reg"]=="Down") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] > numGenes.df[j,"stat_thr"] & top$logFC < logFC_thr),])
}
if (numGenes.df[j,"reg"]=="All") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] > numGenes.df[j,"stat_thr"] & abs(top$logFC) > logFC_thr),])
}
} else {
if (numGenes.df[j,"reg"]=="Up") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & top$logFC > logFC_thr),])
}
if (numGenes.df[j,"reg"]=="Down") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & top$logFC < logFC_thr),])
}
if (numGenes.df[j,"reg"]=="All") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & abs(top$logFC) > logFC_thr),])
}
}
}
stats_thr <- list(B=B_thr, adjPval=adjPval_thr, Pval=Pval_thr)
#set names as defined in columns of top table
stats_names <- c("B", "adj.P.Val", "P.Value") #names(stats_thr)
stats_lengths <- sapply(stats_thr, length)
#initialize dataframe
numGenes.df <- data.frame(stat_type=character(), stat_thr=numeric(), reg=character(), stringsAsFactors=FALSE)
numrows <- sum(stats_lengths)*length(reg)
#fill parameters in dataframe
numGenes.df[1:numrows,"reg"] <- rep(reg, sum(stats_lengths))
numGenes.df[,"stat_type"] <- unlist(mapply(function(x,y) rep(x,y), stats_names, stats_lengths*length(reg)))
numGenes.df[,"stat_thr"] <- unlist(mapply(function(x,y) rep(x,each=y), stats_thr, length(reg)))
numGenes.df$Stat <- paste0(numGenes.df$stat_type, numGenes.df$stat_thr, "_", numGenes.df$reg)
for (i in 1:length(listofcsv)){
top <- listofcsv[[i]]
comp <- listofcoef[i]
for (j in 1:nrow(numGenes.df)){
if (numGenes.df[j,"stat_type"]=="B"){
if (numGenes.df[j,"reg"]=="Up") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] > numGenes.df[j,"stat_thr"] & top$logFC > logFC_thr),])
}
if (numGenes.df[j,"reg"]=="Down") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] > numGenes.df[j,"stat_thr"] & top$logFC < logFC_thr),])
}
if (numGenes.df[j,"reg"]=="All") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] > numGenes.df[j,"stat_thr"] & abs(top$logFC) > logFC_thr),])
}
} else {
if (numGenes.df[j,"reg"]=="Up") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & top$logFC > logFC_thr),])
}
if (numGenes.df[j,"reg"]=="Down") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & top$logFC < logFC_thr),])
}
if (numGenes.df[j,"reg"]=="All") {
numGenes.df[j,comp] <- nrow(top[(top[, numGenes.df[j,"stat_type"]] < numGenes.df[j,"stat_thr"] & abs(top$logFC) > logFC_thr),])
}
}
}
}
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
eset_raw <- read_celfiles(inputDir=celDir, targets=targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
eset_raw
if (boxplotRawData){
qc_boxplot(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, pca2D_factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, dim=3, pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (heatmapRawData){
qc_hc(data=exprs(eset_raw), hclust.method=hclustRawData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="RawData")
}
qc_all(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaRawData.fact, pca_scale=pcaRawData.scale, colorlist=colorlist, hc.method=hclustRawData.method, label="RawData", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=FALSE, dohc=TRUE, doarrayQMreport=FALSE)
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalizedata) {
eset_norm <- normalization(data=eset_raw, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
if (boxplotNormData){
qc_boxplot(data=eset_norm, group="Group", col="Colors", names="ShortName", outputDir=resultsDir, label="NormData")
}
if (pcaNormData){
loadsPCAnorm <- qc_pca1(data=exprs(eset_norm), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData.corrbatch){
loadsPCAnorm.corrbatch <- qc_pca1(exprs(eset_norm), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
}
if (heatmapNormData){
qc_hc(data=exprs(eset_norm), hclust.method=hclustNormData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="NormData")
}
if (pvcaNormData){
qc_pvca(data=eset_norm, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
qc_all(data=eset_norm, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaNormData.fact, pca_scale=pcaNormData.scale, colorlist=colorlist, hc.method=hclustNormData.method, label="NormData", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=TRUE, dohc=TRUE, doarrayQMreport=FALSE)
samplestoremove <- "CMP.2"
eset_raw.f <- eset_raw[,-which(colnames(eset_raw)%in%samplestoremove)]
dim(eset_raw)
dim(eset_raw.f)
pData(eset_raw.f)
targets.f <- pData(eset_raw.f)
eset_norm.f <- normalization(data=eset_raw.f, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
qc_all(data=eset_norm.f, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaNormData.fact, pca_scale=pcaNormData.scale, colorlist=colorlist, hc.method=hclustNormData.method, label="NormData.f", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=FALSE, dohc=TRUE, doarrayQMreport=FALSE)
loadsPCAnorm.f.corrbatch <- qc_pca1(exprs(eset_norm.f), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets.f, col.group="Colors", colorlist=colorlist, names=targets.f$ShortName, outputDir=resultsDir, label="NormData.f", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
if (SDplot){
sdplot(data=exprs(eset_norm.f), var_thr=filterByVar.thr, label="NormData", outputDir=resultsDir)
}
eset_filtered <- filtering(data=eset_norm.f, outputFN="Normalized.Filtered", outputDir=resultsDir, summaryFN=resultsSummFN,
feature.exclude="^AFFX",require.entrez=filterByAnnot, remove.dupEntrez = filterByAnnot,
var.filter=filterByVar, var.func = filterByVar.fun, var.cutoff = filterByVar.thr, filterByQuantile=TRUE,
require.GOBP = FALSE, require.GOCC = FALSE, require.GOMF = FALSE)
dim(eset_filtered)
#no se pq dona error, (Error: no such table: go.go_term) nomes passa quan s'executa com a funcio sense haver previament carregat els paquets (?)
require(annotPackage, character.only=TRUE)
require(annaffy)
if (save_annot_filt){normData.filt_annot <- save_annotations(data=rownames(eset_filtered), annotPkg=annotPackage, outputFN="Annotations.Filtered", saveHTML=TRUE, title="Annotations for filtered genes", outputDir=resultsDir)}
# When you save your data, use save(MyObject, file = "MyObject.RData", version = 2) to maintain back-compatibility and avoid the warning. (otherwise, others using R < 3.5.0 won't be able to load your saved files.)
if (!is.null(samplestoremove)){
if (normalizedata) {
save(eset_raw, eset_norm, eset_raw.f, eset_norm.f, eset_filtered, targets, targets.f, file=file.path(dataDir,"normData.Rda"), version=2)
} else {
save(eset_raw, eset_raw.f, targets, targets.f, file=file.path(dataDir,"rawData.Rda"), version=2)
}} else {
if (normalizedata) {
save(eset_raw, eset_norm, eset_filtered, targets, file=file.path(dataDir,"normData.Rda"), version=2)
} else {
save(eset_raw, targets, file=file.path(dataDir,"rawData.Rda"), version=2)
}}
#Parameters
source(file.path(paramDir, "02-DEA.par"))
#Execution parameters
source(file.path(paramDir, "02-DEA_analysistodo.par"))
(loadDEA_parameters <- read.table(file.path(paramDir, "02-DEA.par"), header = FALSE, sep=";", as.is=TRUE))
(loadDEA_todoparameters <- read.table(file.path(paramDir, "02-DEA_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
resultsDir <- file.path(workingDir, resultsDirN)
load(file.path(dataDir, inputDEARda))
eset_analysis <- eval(parse(text=eset_analysis))
#parameters specified in file 02-DEA.par:
design.mainfact
design.cofact
blocking.fact
(design <- dea_lmdesign(targets=pData(eset_analysis), sampleNames="ShortName", data=eset_analysis,
group=design.mainfact, covariates=design.cofact, fmla=NULL,
summaryFN=resultsSummFN, outputDir=resultsDir))
fit <- dea_lmfit(data=eset_analysis, targets=pData(eset_analysis), design=design, block.cor=NULL, summaryFN=resultsSummFN, outputDir=resultsDir)
fit.main <- dea_compare(fit=fit, contrasts=contrastsv, design=design, moderated=TRUE, summaryFN=resultsSummFN, outputDir=resultsDir)
names(fit.main)
(listofcoef <- colnames(fit.main))
listofcsv <- dea_toptab(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE, #ReportHTMLTopTab,
html_ntop=500, html_group="Group",
outputDir=resultsDir)
listofcsv <- dea_toptab_original(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE,#ReportHTMLTopTab,
html_ntop=500, html_group="Group", html_padjust_method = toptable_padjust_method,
outputDir=resultsDir)
ngc_list <- dea_ngc_extended(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=c(0,0.5,1,1.5,2), outputDir=resultsDir)
numGenesChanged <- dea_ngc_summary(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
ngc_list <- dea_ngc_extended(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=c(0,0.5,1,1.5,2), outputDir=resultsDir)
numGenesChanged <- dea_ngc_summary(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
ngc_list <- dea_ngc_extended(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=c(0,0.5,1,1.5,2), outputDir=resultsDir)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
ngc_list <- dea_ngc_extended(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=c(0,0.5,1,1.5,2), outputDir=resultsDir)
numGenesChanged <- dea_ngc_summary(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
ngc_list <- dea_ngc_extended(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=c(0,0.5,1,1.5,2), outputDir=resultsDir)
numGenesChanged <- dea_ngc_summary(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
#simple
numGenesChanged <- dea_summary_ngc(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir)
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
eset_raw <- read_celfiles(inputDir=celDir, targets=targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
eset_raw
if (boxplotRawData){
qc_boxplot(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, pca2D_factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, dim=3, pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (heatmapRawData){
qc_hc(data=exprs(eset_raw), hclust.method=hclustRawData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="RawData")
}
qc_all(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaRawData.fact, pca_scale=pcaRawData.scale, colorlist=colorlist, hc.method=hclustRawData.method, label="RawData", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=FALSE, dohc=TRUE, doarrayQMreport=FALSE)
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalizedata) {
eset_norm <- normalization(data=eset_raw, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
if (boxplotNormData){
qc_boxplot(data=eset_norm, group="Group", col="Colors", names="ShortName", outputDir=resultsDir, label="NormData")
}
if (pcaNormData){
loadsPCAnorm <- qc_pca1(data=exprs(eset_norm), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData.corrbatch){
loadsPCAnorm.corrbatch <- qc_pca1(exprs(eset_norm), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
}
if (heatmapNormData){
qc_hc(data=exprs(eset_norm), hclust.method=hclustNormData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="NormData")
}
if (pvcaNormData){
qc_pvca(data=eset_norm, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
qc_all(data=eset_norm, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaNormData.fact, pca_scale=pcaNormData.scale, colorlist=colorlist, hc.method=hclustNormData.method, label="NormData", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=TRUE, dohc=TRUE, doarrayQMreport=FALSE)
samplestoremove <- "CMP.2"
eset_raw.f <- eset_raw[,-which(colnames(eset_raw)%in%samplestoremove)]
dim(eset_raw)
dim(eset_raw.f)
pData(eset_raw.f)
targets.f <- pData(eset_raw.f)
eset_norm.f <- normalization(data=eset_raw.f, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
qc_all(data=eset_norm.f, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaNormData.fact, pca_scale=pcaNormData.scale, colorlist=colorlist, hc.method=hclustNormData.method, label="NormData.f", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=FALSE, dohc=TRUE, doarrayQMreport=FALSE)
loadsPCAnorm.f.corrbatch <- qc_pca1(exprs(eset_norm.f), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets.f, col.group="Colors", colorlist=colorlist, names=targets.f$ShortName, outputDir=resultsDir, label="NormData.f", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
if (SDplot){
sdplot(data=exprs(eset_norm.f), var_thr=filterByVar.thr, label="NormData", outputDir=resultsDir)
}
eset_filtered <- filtering(data=eset_norm.f, outputFN="Normalized.Filtered", outputDir=resultsDir, summaryFN=resultsSummFN,
feature.exclude="^AFFX",require.entrez=filterByAnnot, remove.dupEntrez = filterByAnnot,
var.filter=filterByVar, var.func = filterByVar.fun, var.cutoff = filterByVar.thr, filterByQuantile=TRUE,
require.GOBP = FALSE, require.GOCC = FALSE, require.GOMF = FALSE)
dim(eset_filtered)
#no se pq dona error, (Error: no such table: go.go_term) nomes passa quan s'executa com a funcio sense haver previament carregat els paquets (?)
require(annotPackage, character.only=TRUE)
require(annaffy)
if (save_annot_filt){normData.filt_annot <- save_annotations(data=rownames(eset_filtered), annotPkg=annotPackage, outputFN="Annotations.Filtered", saveHTML=TRUE, title="Annotations for filtered genes", outputDir=resultsDir)}
# When you save your data, use save(MyObject, file = "MyObject.RData", version = 2) to maintain back-compatibility and avoid the warning. (otherwise, others using R < 3.5.0 won't be able to load your saved files.)
if (!is.null(samplestoremove)){
if (normalizedata) {
save(eset_raw, eset_norm, eset_raw.f, eset_norm.f, eset_filtered, targets, targets.f, file=file.path(dataDir,"normData.Rda"), version=2)
} else {
save(eset_raw, eset_raw.f, targets, targets.f, file=file.path(dataDir,"rawData.Rda"), version=2)
}} else {
if (normalizedata) {
save(eset_raw, eset_norm, eset_filtered, targets, file=file.path(dataDir,"normData.Rda"), version=2)
} else {
save(eset_raw, targets, file=file.path(dataDir,"rawData.Rda"), version=2)
}}
#Parameters
source(file.path(paramDir, "02-DEA.par"))
#Execution parameters
source(file.path(paramDir, "02-DEA_analysistodo.par"))
(loadDEA_parameters <- read.table(file.path(paramDir, "02-DEA.par"), header = FALSE, sep=";", as.is=TRUE))
(loadDEA_todoparameters <- read.table(file.path(paramDir, "02-DEA_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
resultsDir <- file.path(workingDir, resultsDirN)
load(file.path(dataDir, inputDEARda))
eset_analysis <- eval(parse(text=eset_analysis))
#parameters specified in file 02-DEA.par:
design.mainfact
design.cofact
blocking.fact
(design <- dea_lmdesign(targets=pData(eset_analysis), sampleNames="ShortName", data=eset_analysis,
group=design.mainfact, covariates=design.cofact, fmla=NULL,
summaryFN=resultsSummFN, outputDir=resultsDir))
fit <- dea_lmfit(data=eset_analysis, targets=pData(eset_analysis), design=design, block.cor=NULL, summaryFN=resultsSummFN, outputDir=resultsDir)
fit.main <- dea_compare(fit=fit, contrasts=contrastsv, design=design, moderated=TRUE, summaryFN=resultsSummFN, outputDir=resultsDir)
names(fit.main)
(listofcoef <- colnames(fit.main))
listofcsv <- dea_toptab(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE, #ReportHTMLTopTab,
html_ntop=500, html_group="Group",
outputDir=resultsDir)
listofcsv <- dea_toptab_original(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE,#ReportHTMLTopTab,
html_ntop=500, html_group="Group", html_padjust_method = toptable_padjust_method,
outputDir=resultsDir)
#simple
numGenesChanged <- dea_summary_ngc(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir)
#extended
ngc_list <- dea_summary_ngc_ext(listofcoef=listofcoef, listofcsv=listofcsv, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
numGenesChanged_all <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=B_thr, Pval_thr.e=Pval_thr, adjPval_thr.e=adjPval_thr, logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
numGenesChanged_all <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=B_thr, Pval_thr.e=Pval_thr, adjPval_thr.e=adjPval_thr, logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
a<- function(x=3,y=x){x+y}
a
a()
a<- function(x=3,y=x){y}
a
a()
# knitr::opts_chunk$set(collapse = TRUE,  comment = "#>")
# knitr::opts_chunk$set(echo = TRUE)
if (!require(maUEB)){
require(devtools)
install_github("uebvhir/maUEB", build_vignettes = FALSE)
}
# Set working directory (it paths to vignette directory)
workingDir  <- getwd()
# Parameters directory
paramDir <- file.path(workingDir, "parameters")
source(file.path(paramDir, "global_parameters.par"))
(global_parameters <- read.table(file.path(paramDir, "global_parameters.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
celDir <-  file.path(workingDir, celDirN)
resultsDir <- file.path(workingDir, resultsDirN)
build_targets(inputDir=celDir, outputDir=dataDir, client=client, ID=ID, descriptors=descriptors)
(targets_template <- read.table(file.path(dataDir, "targets.RSRCHR.STUDY.template.csv"), header = TRUE, sep = ";", as.is=TRUE))
#Parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt.par"))
#Execution parameters
source(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"))
(loadQCNormfilt_parameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt.par"), header = FALSE, sep=";", as.is=TRUE))
(loadQCNormfilt_todoparameters <- read.table(file.path(paramDir, "01-Load-QC-Norm-Filt_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
(targets <- read_targets(inputDir=dataDir, targetsFN=targetsFN, targets.fact=targets.fact))
summary(targets)
if (readcelFiles){
eset_raw <- read_celfiles(inputDir=celDir, targets=targets)
} else {if (loadRawData) {load(file.path(dataDir, "rawData.Rda"))}}
eset_raw
if (boxplotRawData){
qc_boxplot(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", outputDir=resultsDir, label="RawData")
}
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, pca2D_factors=pcaRawData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
#si el volem en 3 dimensions:
if (pcaRawData){
loadsPCAraw <- qc_pca1(data=exprs(eset_raw), scale=pcaRawData.scale, dim=3, pca3D_factors="Group", targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="RawData")
}
if (heatmapRawData){
qc_hc(data=exprs(eset_raw), hclust.method=hclustRawData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="RawData")
}
qc_all(data=eset_raw, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaRawData.fact, pca_scale=pcaRawData.scale, colorlist=colorlist, hc.method=hclustRawData.method, label="RawData", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=FALSE, dohc=TRUE, doarrayQMreport=FALSE)
if (loadNormData) {
load(file.path(dataDir, "normData.Rda"))
} else if (normalizedata) {
eset_norm <- normalization(data=eset_raw, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
}
if (boxplotNormData){
qc_boxplot(data=eset_norm, group="Group", col="Colors", names="ShortName", outputDir=resultsDir, label="NormData")
}
if (pcaNormData){
loadsPCAnorm <- qc_pca1(data=exprs(eset_norm), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData")
}
if (pcaNormData.corrbatch){
loadsPCAnorm.corrbatch <- qc_pca1(exprs(eset_norm), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets, col.group="Colors", colorlist=colorlist, names=targets$ShortName, outputDir=resultsDir, label="NormData", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
}
if (heatmapNormData){
qc_hc(data=exprs(eset_norm), hclust.method=hclustNormData.method, names=targets$ShortName, cexRow = 0.6, cexCol = 0.6, rect=TRUE, numclusters=2, outputDir=resultsDir, label="NormData")
}
if (pvcaNormData){
qc_pvca(data=eset_norm, factors=pvcaNormData.fact, targets=targets.pvcaFN, pct_threshold=pct_threshold, label=".NormData", outputDir=resultsDir, summaryFN=resultsSummFN)
}
qc_all(data=eset_norm, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaNormData.fact, pca_scale=pcaNormData.scale, colorlist=colorlist, hc.method=hclustNormData.method, label="NormData", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=TRUE, dohc=TRUE, doarrayQMreport=FALSE)
samplestoremove <- "CMP.2"
eset_raw.f <- eset_raw[,-which(colnames(eset_raw)%in%samplestoremove)]
dim(eset_raw)
dim(eset_raw.f)
pData(eset_raw.f)
targets.f <- pData(eset_raw.f)
eset_norm.f <- normalization(data=eset_raw.f, norm.method="rma", annotPkg=annotPackage, outputFN="Normalized.All", outputDir=resultsDir)
qc_all(data=eset_norm.f, group="Group", group.color="Colors", samplenames="ShortName", factors=pcaNormData.fact, pca_scale=pcaNormData.scale, colorlist=colorlist, hc.method=hclustNormData.method, label="NormData.f", outputDir=resultsDir, summaryFN=resultsSummFN, doboxplot=TRUE, dopca=TRUE, dopvca=FALSE, dohc=TRUE, doarrayQMreport=FALSE)
loadsPCAnorm.f.corrbatch <- qc_pca1(exprs(eset_norm.f), scale=pcaNormData.scale, pca2D_factors=pcaNormData.fact, targets=targets.f, col.group="Colors", colorlist=colorlist, names=targets.f$ShortName, outputDir=resultsDir, label="NormData.f", batchRemove=TRUE, batchFactors="Batch", size = 1.5, glineas = 0.25)
if (SDplot){
sdplot(data=exprs(eset_norm.f), var_thr=filterByVar.thr, label="NormData", outputDir=resultsDir)
}
eset_filtered <- filtering(data=eset_norm.f, outputFN="Normalized.Filtered", outputDir=resultsDir, summaryFN=resultsSummFN,
feature.exclude="^AFFX",require.entrez=filterByAnnot, remove.dupEntrez = filterByAnnot,
var.filter=filterByVar, var.func = filterByVar.fun, var.cutoff = filterByVar.thr, filterByQuantile=TRUE,
require.GOBP = FALSE, require.GOCC = FALSE, require.GOMF = FALSE)
dim(eset_filtered)
#no se pq dona error, (Error: no such table: go.go_term) nomes passa quan s'executa com a funcio sense haver previament carregat els paquets (?)
require(annotPackage, character.only=TRUE)
require(annaffy)
if (save_annot_filt){normData.filt_annot <- save_annotations(data=rownames(eset_filtered), annotPkg=annotPackage, outputFN="Annotations.Filtered", saveHTML=TRUE, title="Annotations for filtered genes", outputDir=resultsDir)}
# When you save your data, use save(MyObject, file = "MyObject.RData", version = 2) to maintain back-compatibility and avoid the warning. (otherwise, others using R < 3.5.0 won't be able to load your saved files.)
if (!is.null(samplestoremove)){
if (normalizedata) {
save(eset_raw, eset_norm, eset_raw.f, eset_norm.f, eset_filtered, targets, targets.f, file=file.path(dataDir,"normData.Rda"), version=2)
} else {
save(eset_raw, eset_raw.f, targets, targets.f, file=file.path(dataDir,"rawData.Rda"), version=2)
}} else {
if (normalizedata) {
save(eset_raw, eset_norm, eset_filtered, targets, file=file.path(dataDir,"normData.Rda"), version=2)
} else {
save(eset_raw, targets, file=file.path(dataDir,"rawData.Rda"), version=2)
}}
#Parameters
source(file.path(paramDir, "02-DEA.par"))
#Execution parameters
source(file.path(paramDir, "02-DEA_analysistodo.par"))
(loadDEA_parameters <- read.table(file.path(paramDir, "02-DEA.par"), header = FALSE, sep=";", as.is=TRUE))
(loadDEA_todoparameters <- read.table(file.path(paramDir, "02-DEA_analysistodo.par"), header = FALSE, sep=";", as.is=TRUE))
dataDir <- file.path(workingDir, dataDirN)
resultsDir <- file.path(workingDir, resultsDirN)
load(file.path(dataDir, inputDEARda))
eset_analysis <- eval(parse(text=eset_analysis))
#parameters specified in file 02-DEA.par:
design.mainfact
design.cofact
blocking.fact
(design <- dea_lmdesign(targets=pData(eset_analysis), sampleNames="ShortName", data=eset_analysis,
group=design.mainfact, covariates=design.cofact, fmla=NULL,
summaryFN=resultsSummFN, outputDir=resultsDir))
fit <- dea_lmfit(data=eset_analysis, targets=pData(eset_analysis), design=design, block.cor=NULL, summaryFN=resultsSummFN, outputDir=resultsDir)
fit.main <- dea_compare(fit=fit, contrasts=contrastsv, design=design, moderated=TRUE, summaryFN=resultsSummFN, outputDir=resultsDir)
names(fit.main)
(listofcoef <- colnames(fit.main))
listofcsv <- dea_toptab(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE, #ReportHTMLTopTab,
html_ntop=500, html_group="Group",
outputDir=resultsDir)
listofcsv <- dea_toptab_original(listofcoef=listofcoef, fit.main=fit.main, eset=eset_analysis, padjust.method="fdr",
html_report=FALSE,#ReportHTMLTopTab,
html_ntop=500, html_group="Group", html_padjust_method = toptable_padjust_method,
outputDir=resultsDir)
#simple
numGenesChanged <- dea_summary_ngc(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir)
#extended
ngc_list <- dea_summary_ngc_ext(listofcoef=listofcoef, listofcsv=listofcsv, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
?dea_summary_ngc1
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
numGenesChanged_all <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=B_thr, Pval_thr.e=Pval_thr, adjPval_thr.e=adjPval_thr, logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
View(numGenesChanged_all)
numGenesChanged_all <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
numGenesChanged_all <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
View(numGenesChanged_all)
ngc <- list(numGenesChanged, ngc_list)
View(ngc)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
#si declaro els parametres aixi no em funciona:
numGenesChanged_allkk <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=B_thr, Pval_thr.e=Pval_thr, adjPval_thr.e=adjPval_thr, logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
(numGenesChanged <- dea_summary_ngc(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, outputDir=resultsDir))
ngc_list <- dea_summary_ngc_ext(listofcoef=listofcoef, listofcsv=listofcsv, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
ngc_list[[1]]
names(ngc_list)
ngc_list[["PD1vsCTL"]]
head(ngc_list[["PD1vsCTL"]])
names(numGenesChanged_all)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
numGenesChanged_all <- dea_summary_ngc1(listofcoef=listofcoef, listofcsv=listofcsv, B_thr=c(0), Pval_thr=c(0.01,0.05,0.1), adjPval_thr=c(0.01,0.05,0.15,0.25), logFC_thr=0, extended=TRUE, B_thr.e=c(0), Pval_thr.e=c(0.01,0.05,0.1), adjPval_thr.e=c(0.01,0.05,0.15,0.25), logFC_thr.e=c(0,0.5,1,1.5,2), outputDir=resultsDir)
names(numGenesChanged_all)
source('/media/mferrer/Datos/Mireia/Scripts/Paquets_mireia/create_pkg_maUEB.R', echo=TRUE)
